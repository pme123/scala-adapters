# This is the SPECIFIC configuration file for the ADMIN subproject (development or production).
# ~~~~~
# Uncomment this for the most verbose Akka debugging:
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      #receive = on
      #autoreceive = on
      #lifecycle = on
    }
  }
}


play {
  http {

    # In this class all filters are defined.
    # If you want to have all filters, change it to: play.http.filters=pme123.adapters.server.boundary.Filters
    # If you want to have no filters, change it to: play.http.filters=pme123.adapters.server.boundary.NoFilters
    # If you are on production, change it to: play.http.filters=pme123.adapters.server.boundary.ProdFilters
    filters = pme123.adapters.server.boundary.Filters

    # ErrorHandler
    # ~~~~~
    # Define the ErrorHandler to use for this WEB module.
    errorHandler = "pme123.adapters.server.boundary.ErrorHandler"
  }
  filters {
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # Connect to localhost:9000 for content security policy on websockets
    headers {
      contentSecurityPolicy = "connect-src 'self' ws://localhost:9000"
    }

    # https://www.playframework.com/documentation/latest/AllowedHostsFilter
    # Allow requests to localhost:9000.
    hosts {
      allowed = ["localhost:9000"]
    }
  }
  modules {
    enabled += "com.kenshoo.play.metrics.PlayModule"
    enabled += "AdaptersModule"
  }
  # used for the AssetsFinder API
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }
}

// ******************************************************************************** //
//                   SF Import Client Configuration                                 //
// ******************************************************************************** //
pme123.adapters.server {

  // name of the project
  project = "adapters-project"
  // there are 2 modes:
  // 1. PROD (default)
  // 2. DEV -> this is used for testing purposes as it creates the Profiles and Layouts automatically if they do not exist.
  run.mode = "PROD"
  // here you can define the timezone the adapter should run
  // the schedulers or the log entries
  timezone = "Europe/Zurich"

  admin.mail {
    // set this to false if you don't want to send mails
    active = true
    // the Adapter creates a Log during the import.
    // next to the Log file it will also be sent to the following address
    // Default: developer - only for test reasons.
    recipient = "pascal.mengelt@screenfoodnet.com"
    recipient = ${?er.javamail.adminEmail}
    // this is the Subject of the admin mail
    // the following will alway be added:
    //  - And the maximal Log Level (eg. WARN if there warnings or INFO if everything went great)
    //  - DateTime (eg. 2015-10-15T12:14:34.493+02:00)
    // Here an example: 'Import Report [WARN 2015-10-15T12:14:34.493+02:00]'
    subject = "Import Report"
    // the Level of information that should be logged and sent.
    // ERROR: Problems during Import, e.g. no connection to the Coop Webservice.
    // WARN:  If content was generated automatically, like Partner-directories and Players.
    // INFO:  If the import went without any problems. With this level a report is always sent after an import.
    loglevel = "info"
  }
  // the mail server configuration
  mail {
    host = "localhost"
    port = 25
    smtp.tls = false
    smtp.ssl = false

    from = "import-adapter@screenfoodnet.com"
    username = ""
    password = ""
  }

  scheduler.execution {
    // the first time of day the Import should run (this is the Server time!). (format is HH:mm)
    // Default is 01:00
    first.time = "01:00"
    // the first weekday if needed (e.g. to emulate once a week)
    // possible: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" or "-" for nothing
    first.weekday = "-"

    // the period the Adapter should call the Coop Webservice
    // Default is one day (1440 minutes) - be aware 1 minute is the smallest period possible
    // - and it must be greater than the time the import takes!
    // make also sure that the period is so that the import is at always the same time of day.
    period.minutes = 1440
  }

  import.log {
    // true if the LogReport should be stored to a file
    enabled = true
    // the path where the import/adapter log is stored
    path = "/opt/temp/import_logs"
  }
  // experimental choose between:
  // InMemory (the log is done in memory)
  // MongoDB (the log is persisted in MongoDB)
  log.service = "InMemory"

  // flags for CSSER-3102:
  profiles {
    // if true: existing ProfileValues that are not in the import will be deleted
    // if false: existing ProfileValues that are not in the import will NOT be deleted
    replace.missing = false
    // if true: new ProfileValues that have a null or empty value will be imported.
    // if false: new ProfileValues that have a null or empty value will NOT be imported.
    allow.empty.values = true
  }


  # a sequence of domains that have access to the websocket.
  # This will check if the origin is either 'localhost' or from a domain that ends with 'screenfood.com'.
  # security.origins = ["localhost", "127.0.0.1", ".screenfoodnet.com",  ".screenfood.com"]
  # to disable security uncomment this line
  wsocket.hosts.allowed = ["http://localhost:9000"]

}
