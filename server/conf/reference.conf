# This is the SPECIFIC configuration file for the ADMIN subproject (development or production).
# ~~~~~
# Uncomment this for the most verbose Akka debugging:
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      #receive = on
      #autoreceive = on
      #lifecycle = on
    }
  }
}


play {
  http {

    # In this class all filters are defined.
    # If you want to have all filters, change it to: play.http.filters=pme123.adapters.server.boundary.Filters
    # If you want to have no filters, change it to: play.http.filters=pme123.adapters.server.boundary.NoFilters
    # If you are on production, change it to: play.http.filters=pme123.adapters.server.boundary.ProdFilters
    filters = pme123.adapters.server.boundary.ProdFilters

    # Router
    # ~~~~~
    # Define the Router object to use for this ADAPTERS module
    router = adapters.Routes

    # ErrorHandler
    # ~~~~~
    # Define the ErrorHandler to use for this WEB module.
    errorHandler = "pme123.adapters.server.boundary.ErrorHandler"
  }

  modules {
    enabled += "com.kenshoo.play.metrics.PlayModule"
    enabled += "AdaptersModule"
  }
  # used for the AssetsFinder API
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }
}

// ******************************************************************************** //
//                   Adapters Configuration                                 //
// ******************************************************************************** //
pme123.adapters {

  // name of the project
  project = "adapters-project"
  // there are 2 modes:
  // 1. PROD (default)
  // 2. DEV -> this is used for testing purposes as it creates the Profiles and Layouts automatically if they do not exist.
  run.mode = "PROD"
  // here you can define the timezone the adapter should run
  // the schedulers or the log entries
  timezone = "Europe/Zurich"

  // the encoding used for an en- and decoding of Strings.
  char.encoding = "UTF-8"

  admin.mail {
    // set this to false if you don't want to send mails
    active = false
    // the Adapter creates a Log during the import.
    // next to the Log file it will also be sent to the following address
    // Default: developer - only for test reasons.
    recipient = "admin@example.com"
    // this is the Subject of the admin mail
    // the following will alway be added:
    //  - And the maximal Log Level (eg. WARN if there warnings or INFO if everything went great)
    //  - DateTime (eg. 2015-10-15T12:14:34.493+02:00)
    // Here an example: 'Import Report [WARN 2015-10-15T12:14:34.493+02:00]'
    subject = "Import Report"
    // the Level of information that should be logged and sent.
    // ERROR: Problems during Import, e.g. no connection to the Coop Webservice.
    // WARN:  If content was generated automatically, like Partner-directories and Players.
    // INFO:  If the import went without any problems. With this level a report is always sent after an import.
    loglevel = "info"
  }
  // the mail server configuration
  mail {
    host = "localhost"
    port = 25
    smtp.tls = false
    smtp.ssl = false

    from = "pme123-adapters@example.com"
    username = ""
    password = ""
  }

  process.log {
    // true if the LogReport should be stored to a file
    enabled = false
    // the path where the import/adapter log is stored
    path = "/opt/temp/import_logs"
  }

  # a sequence of domains that have access to the websocket.
  # This will check if the origin starts with whatever is in the list.
  # security.origins = ["localhost", "127.0.0.1", "https://travis-ci.org/profile/pme123"]
  # to disable security uncomment this line
  wsocket.hosts.allowed = ["http://localhost:9000","http://localhost:5000"]

  job.configs = [{
    ident = "demoJob"
    schedule {
      // the first time of day the Import should run (this is the Server time!). (format is HH:mm)
      // Default is 01:00
      // if you want to start the Job right away - use: "NOW"
      first.time = "NOW"
      // the first weekday if needed (e.g. to emulate once a week)
      // possible: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday" or "-" for nothing
      first.weekday = "tuesday"

      // the period the Adapter should call the Coop Webservice
      // Default is one day (1440 minutes) - be aware 1 minute is the smallest period possible
      // - and it must be greater than the time the import takes!
      // make also sure that the period is so that the import is at always the same time of day.
      interval.minutes = 2
    }
  }, {
    ident = "demoJobWithDefaultScheduler"
    schedule {
    }
  }, {
    ident = "demoJobWithoutScheduler"
  }]

}
